if (!is.null(model)) {
bic_val <- BIC(model)
arma_bic_results <- rbind(
arma_bic_results,
data.frame(p = p, q = q, BIC = bic_val)
)
}
}
}
# Sort by BIC
arma_bic_results <- arma_bic_results[order(arma_bic_results$BIC), ]
print(arma_bic_results)
ma_model <- Arima(train_diff, order = c(0, 0, 1))
ma_model
# Step 3: Forecast 24 months ahead
ma_forecast <- forecast(ma_model, h = 24, level = 95)
ma_forecast
# Step 4: Plot forecast along with actual data from 2016 to 2024
# Get actual differenced series for that range
diff_series_window <- window(diff_series, start = c(2016, 1))
autoplot(ma_forecast) +
autolayer(diff_series_window, series = "Actual Changes", color = "black") +
labs(title = "Forecast of oil prices in differences (23-25)", x = "Year",
y = "Log Difference of Oil Prices"
) +
theme_minimal() +
guides(color = guide_legend(title = "Series"))
## (h) Use the model you chose in part (f) to forecast the level of oil prices for the years of 2023 and 2024, and compute its 95% forecast interval as well. Plot your point and interval forecasts together with the actual data for the period from 2016 to 2024.
```{r 2.h}
library(dplyr)
last_level <- tail(oil_data$oil_price, 1)  # oil price as of Dec 2022
# Recover level forecast from difference forecast
level_forecast <- cumsum(ma_forecast$mean) + last_level
# Also compute bounds
lower_level <- cumsum(ma_forecast$lower[,1]) + last_level
upper_level <- cumsum(ma_forecast$upper[,1]) + last_level
dates_forecast <- seq(as.Date("2023-01-01"), by = "month", length.out = 24)
# Create forecast frame
oil_level_forecast <- data.frame(
date = dates_forecast,
point_forecast = level_forecast,
lower_95 = lower_level,
upper_95 = upper_level
)
plot_data <- oil_data[oil_data$date >= as.Date("2016-01-01"), c("date", "oil_price")]
ggplot() +
geom_line(data = plot_data, aes(x = date, y = oil_price), color = "steelblue") +
geom_line(data = oil_level_forecast, aes(x = date, y = point_forecast), color = "orange", linewidth = 1) +
geom_ribbon(data = oil_level_forecast, aes(x = date, ymin = lower_95, ymax = upper_95), alpha = 0.2, fill = "orange") +
labs(title = "Forecasted Oil Price Levels (2023–2024)",
x = "Year", y = "Oil Price (USD/barrel)") +
theme_minimal()
ggplot() +
geom_line(data = plot_data, aes(x = date, y = oil_price), color = "steelblue") +
geom_line(data = oil_level_forecast, aes(x = date, y = point_forecast), color = "orange", linewidth = 1) +
geom_ribbon(data = oil_level_forecast, aes(x = date, ymin = lower_95, ymax = upper_95), alpha = 0.2, fill = "orange") +
labs(title = "Forecasted Oil Price Levels (2023–2024)",
x = "Year", y = "Oil Price (USD/barrel)") +
theme_minimal()
acf <- acf(residual_arma, lag.max = 25, main = "Correllogram of ARMA Residuals")
# Fit ARMA(3,0,3) model
arma_model <- arima(log_ts, order = c(3, 0, 3))
arma_model
disney <- read.csv("disney_stock_price.csv")
View(disney)
View(disney)
disney <- disney %>% select(-X)
disney <- disney %>% select(-X)
disney <- disney %>% select(_X)
disney <- disney %>% select(--X)
disney <- disney %>% selec(--X)
disney <- disney %>% selec(-X)
disney <- disney %>% selec(-disney$X)
disney <- disney %>% select(-disney$X)
disney <- read.csv("disney_stock_price.csv")
disney <- disney %>% select(-disney$X)
disney$X <- NULL
View(disney)
ggplot(disney, aes(x = date, y = log(disney_stock)))
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 1)
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 1) +
labs(title = "log of disney stock over time", x = "price",
y = "stock") +
theme_minimal()
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 1) +
labs(title = "log of disney stock over time", x = "time",
y = "stock") +
theme_minimal()
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 2) +
labs(title = "log of disney stock over time", x = "time",
y = "stock") +
theme_minimal()
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 12) +
labs(title = "log of disney stock over time", x = "time",
y = "stock") +
theme_minimal()
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 2) +
labs(title = "log of disney stock over time", x = "time",
y = "stock") +
theme_minimal()
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 1) +
labs(title = "log of disney stock over time", x = "time",
y = "stock") +
theme_minimal()
rt <- diff(log(disney$disney_stock))
rt
gggplot(disney, aes(x = date, y = rt)
ggplot(disney, aes(x = date, y = rt)
ggplot(disney, aes(x = date, y = rt))
ggplot(disney, aes(x = date, y = rt)) +
geom_line()
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1)
length(rt)
length(disney$disney_stock)
disney$diff_rt <- na.omit(rt)
disney$rt <- diff(log(disney$disney_stock))
rt
library(dplyr)
disney <- read.csv("disney_stock_price.csv")
disney$X <- NULL
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 1) +
labs(title = "log of disney stock over time", x = "time",
y = "stock") +
theme_minimal()
disney$rt <- diff(log(disney$disney_stock))
disney$rt <- c(NA, diff(log(disney$disney_stock))
ggplot(disney, aes(x = date, y = rt)) +
ggplot(disney, aes(x = date, y = disney$rt)) +
geom_line(color = "darkblue", group = 1)
View(disney)
disney$rt
disney$rt <- c(NA, diff(log(disney$disney_stock)))
disney$rt
ggplot(disney, aes(x = date, y = disney$rt)) +
geom_line(color = "darkblue", group = 1)
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1)
``` {r 1.b, warnings = 'hide'}
disney$rt <- c(NA, diff(log(disney$disney_stock)))
length(disney$disney_stock)
disney$diff_rt <- na.omit(rt)
rt <- na.omit
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1)
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1)
disney$rt <- na.omit(disney$rt)
disney <- read.csv("disney_stock_price.csv")
disney$X <- NULL
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 1) +
labs(title = "log of disney stock over time", x = "time",
y = "stock") +
theme_minimal()
disney$rt <- c(NA, diff(log(disney$disney_stock)))
length(disney$disney_stock)
disney$diff_rt <- na.omit(rt)
disney$rt <- na.omit(disney$rt)
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1)
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1) +
scale_x_date(
date_breaks = "1 year",                # spacing (e.g., "1 month", "6 months")
date_labels = "%Y",                    # formatting (e.g., "%b %Y" for "Jan 2023")
limits = as.Date(c("2016-01-01", "2024-01-01"))  # x-axis range
)
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1) +
```
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1) +
```
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1) +
```
disney$rt <- c(NA, diff(log(disney$disney_stock)))
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1) +
```
disney <- read.csv("disney_stock_price.csv")
disney$X <- NULL
ggplot(disney, aes(x = date, y = log(disney_stock))) +
geom_line(color = "darkblue", group = 1) +
labs(title = "log of disney stock over time", x = "time",
y = "stock") +
theme_minimal()
disney$rt <- c(NA, diff(log(disney$disney_stock)))
length(disney$disney_stock)
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1) +
```
ggplot(disney, aes(x = date, y = rt)) +
geom_line(color = "darkblue", group = 1)
ggplot(disney, x = rt) +
geom_histogram(color = "pink")
ggplot(disney, aes(x = rt) +
geom_histogram(color = "pink")
geom_histogram(bins = 50, color = "pink")
ggplot(disney, aes(x = rt)) +
geom_histogram(bins = 50, color = "pink")
ggplot(disney, aes(x = rt)) +
geom_histogram(bins = 50, color = "orange")
ggplot(disney, aes(x = rt)) +
geom_histogram(bins = 50, fill = "pink" color = "orange")
ggplot(disney, aes(x = rt)) +
geom_histogram(bins = 50, fill = "pink", color = "orange")
ggplot(disney, aes(x = rt)) +
geom_histogram(bins = 50, fill = "pink", color = "orange")
summary(rt)
summary(disney$rt)
install.packages("moments")
library(moments)
skewness(disney$rt, na.rm = TRUE)
kurtosis(disney$rt, na.rm = TRUE)
ggplot(disney, aes(x = rt)) +
geom_histogram(bins = 50, fill = "pink", color = "orange")
r2/t <- disney$rt^2
squared_returns <- disney$rt^2
acf_disney <- acf(squared_returns, lag.max = 25, main = "acf")
squared_returns <- na.omit(squared_returns)
acf_disney <- acf(squared_returns, lag.max = 25, main = "acf")
pacf_disney <- pacf(squared_returns, lag.max = 25, main = "acf")
acf_disney <- acf(squared_returns, lag.max = 25, main = "acf")
acf_disney <- acf(squared_returns, lag.max = 100, main = "acf")
pacf_disney <- pacf(squared_returns, lag.max = 100, main = "acf")
pacf_disney <- pacf(squared_returns, lag.max = 25, main = "acf")
acf_disney <- acf(squared_returns, lag.max = 25, main = "acf")
)
library(forecast)
returns_model <- ar(squared_returns)
returns model
returns_model
returns_model <- ar(squared_returns, order = 1)
returns_model
returns_model
returns_model <- arima(squared_returns, order = c(1,0,0))
returns_model
returns_model
ar1 <- returns_model$coef
ar1
ar1 <- returns_model$coef["ar1"]
ar1
returns_model <- arima(squared_returns, order = c(1,0,0))
se <- sqrt(diag(vcov(retunrs_model)))["ar1"]
se <- sqrt(diag(vcov(retunrs_model)))["ar1"[]
ar1 <- returns_model$coef["ar1"]
se <- sqrt(diag(vcov(retunrs_model)))["ar1"[]
ar1 <- returns_model$coef["ar1"]
returns_model <- arima(squared_returns, order = c(1,0,0))
returns_model
ar1 <- returns_model$coef["ar1"]
se <- sqrt(diag(vcov(retunrs_model)))["ar1"[]
t-stat <- ar1 / se
returns_model <- arima(squared_returns, order = c(1,0,0))
returns_model
ar1 <- returns_model$coef["ar1"]
se <- sqrt(diag(vcov(retunrs_model)))["ar1"[]
t-stat <- ar1 / se
stat <- ar1 / se
returns_model
ar1 <- returns_model$coef["ar1"]
se <- sqrt(diag(vcov(retunrs_model)))["ar1"[]
stat <- ar1 / se
returns_model
install.packages("rugarch")
library(rugarch)
# ARCH(1) specification
spec_arch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 0)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "norm"
)
# GARCH(1,1) specification
spec_garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "norm"
)
# Fit the models
fit_arch <- ugarchfit(spec = spec_arch, data = disney$rt, solver = "hybrid")
rt <- na.omit(disney$rt)
# Fit the models
fit_arch <- ugarchfit(spec = spec_arch, data = rt, solver = "hybrid")
fit_garch <- ugarchfit(spec = spec_garch, data = rt, solver = "hybrid")
# Compare SIC (BIC)
bic_arch <- infocriteria(fit_arch)[2]  # SIC for ARCH(1)
bic_garch <- infocriteria(fit_garch)[2]  # SIC for GARCH(1,1)
bic_arch
bic_garch
sic_arch
sic_garch
# Compare SIC (BIC)
sic_arch <- infocriteria(fit_arch)[2]  # SIC for ARCH(1)
sic_garch <- infocriteria(fit_garch)[2]  # SIC for GARCH(1,1)
sic_arch
sic_garch
sic_arch
install.packages("fGarch")
install.packages("fGarch")
model_garch <- garchFit(~ garch(1, 1), data = disney$rt, trace = FALSE)
rt <- na.omit(disney$rt)
model_garch <- garchFit(~ garch(1, 1), data = rt, trace = FALSE)
summary(model_garch)
model_arch <- garchFit(~ garch(1,0) data = rt, trace = FALSE)
model_arch <- garchFit(~ garch(1,0), data = rt, trace = FALSE)
summary(model_arch)
# Compare SIC (BIC)
sic_arch <- infocriteria(model_arch)[2]  # SIC for ARCH(1)
arch_sic <- model_arch$SIC
arch_sic <- model_arch$sic
arch_sic <- model_arch$omega
summary(model_garch)
summary(model_arch)
arch_ar1 <- garchFit(formula = ~ arma(1,0) + garch(1,0), data = rt,
trace = FALSE)
garch_ar1 <- garchFit(formula = ~ + arma(1,0) + garch(1,1),
data = rt, trace = FALSE)
summary(garch_ar1)
summary(arch_ar1)
summary(garch_ar1)
summary(model_garch)
cond_vol <- garch_ar1_model@sigma.t
cond_vol <- garch_ar1@sigma.t
# Create a dataframe with date and volatility
vol_df <- data.frame(
date = disney$date[!is.na(disney$rt)],  # remove NA to align
volatility = cond_vol
)
# Plot the conditional volatility
library(ggplot2)
ggplot(vol_df, aes(x = date, y = volatility)) +
geom_line(color = "darkred") +
labs(
title = "Estimated Conditional Volatility from AR(1)-GARCH(1,1)",
x = "Date",
y = "Conditional Volatility (σₜ)"
) +
theme_minimal()
vol_df
ggplot(vol_df, aes(x = date, y = volatility)) +
geom_line(color = "darkred") +
labs(
title = "Estimated Conditional Volatility from AR(1)-GARCH(1,1)",
x = "Date",
y = "Conditional Volatility (σₜ)"
) +
theme_minimal()
ggplot(vol_df, aes(x = date, y = volatility, group = 1)) +
geom_line(color = "darkred") +
labs(
title = "Estimated Conditional Volatility from AR(1)-GARCH(1,1)",
x = "Date",
y = "Conditional Volatility (σₜ)"
) +
theme_minimal()
# Forecast conditional volatility: 2-months ahead (approx 43 trading days)
vol_forecast <- predict(garch_model, n.ahead = 43)
# Forecast conditional volatility: 2-months ahead (approx 43 trading days)
vol_forecast <- predict(garch, n.ahead = 43)
# Forecast conditional volatility: 2-months ahead (approx 43 trading days)
vol_forecast <- predict(model_garch, n.ahead = 43)
# Create forecast dataframe
forecast_dates <- seq(from = as.Date("2024-10-01"), by = "day", length.out = 43)
forecast_df <- data.frame(
date = forecast_dates,
forecast_vol = vol_forecast$standardDeviation
)
# Combine with historical volatility from 2020 onwards
hist_vol_df <- data.frame(
date = disney$date,
vol = garch_model@sigma.t
) %>%
filter(date >= as.Date("2020-01-01"))
# Combine with historical volatility from 2020 onwards
hist_vol_df <- data.frame(
date = disney$date,
vol = model_garchl@sigma.t
) %>%
filter(date >= as.Date("2020-01-01"))
# Combine with historical volatility from 2020 onwards
hist_vol_df <- data.frame(
date = disney$date,
vol = model_garchl@sigma.t
) %>%
filter(date >= as.Date("2020-01-01"))
# Combine with historical volatility from 2020 onwards
hist_vol_df <- data.frame(
date = disney$date,
vol = model_garch@sigma.t
) %>%
filter(date >= as.Date("2020-01-01"))
# Combine with historical volatility from 2020 onwards
hist_vol_df <- data.frame(
date = disney$date[-1],
vol = model_garch@sigma.t
) %>%
filter(date >= as.Date("2020-01-01"))
# Plot forecast + historical volatility
library(ggplot2)
ggplot() +
geom_line(data = hist_vol_df, aes(x = date, y = vol), color = "navy", linewidth = 0.5) +
geom_line(data = forecast_df, aes(x = date, y = forecast_vol), color = "orange", linewidth = 1) +
labs(
title = "Forecasted Conditional Volatility (Oct–Nov 2024)",
x = "Date",
y = expression("Conditional Volatility (" * sigma[t] * ")")
) +
theme_minimal() +
scale_x_date(date_breaks = "6 months", date_labels = "%b %Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
hist_vol_df$date <- as.Date(hist_vol_df$date)
ggplot() +
geom_line(data = hist_vol_df, aes(x = date, y = vol), color = "navy", linewidth = 0.5) +
geom_line(data = forecast_df, aes(x = date, y = forecast_vol), color = "orange", linewidth = 1) +
labs(
title = "Forecasted Conditional Volatility (Oct–Nov 2024)",
x = "Date",
y = expression("Conditional Volatility (" * sigma[t] * ")")
) +
theme_minimal() +
scale_x_date(date_breaks = "6 months", date_labels = "%b %Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load libraries
library(vars)
library(readr)
library(lubridate)
package.install("vars")
install.packages("vars")
library(vars)
library(readr)
library(lubridate)
# Load data
df <- read_csv("gdp_cpi_fred.csv")
# Rename for convenience
colnames(df) <- c("date", "cpi", "gdp")
# Convert date and filter training data (up to 2018)
df$date <- as.Date(df$date)
train_data <- subset(df, date < as.Date("2019-01-01"))
ts_data <- train_data[, c("cpi", "gdp")]
var_model <- VAR(ts_data, p = 2, type = "const")
# Get residuals
resids <- residuals(var_model)
# Covariance between innovations (CPI and GDP)
sigma_gi <- cov(resids)[1, 2]
print(sigma_gi)
# Covariance between innovations (CPI and GDP)
sigma_gi <- cov(resids)[1, 2]
print(sigma_gi)
# Test whether GDP Granger-causes CPI
granger_test <- causality(var_model, cause = "gdp")
print(granger_test$Granger)
# Forecast two steps ahead (2019Q1, 2019Q2)
forecast_result <- predict(var_model, n.ahead = 2)
# GDP forecast for 2019Q2 (2nd step, 2nd variable)
gdp_2019q2 <- forecast_result$fcst$gdp[2, "fcst"]
print(gdp_2019q2)
# Load libraries
library(readr)
library(forecast)
library(lubridate)
library(ggplot2)
# Load the data
claims <- read_csv("ICSA.csv")  # Make sure the CSV is in your working directory
# Convert DATE to Date format
claims$DATE <- as.Date(claims$DATE)
# Rename columns for convenience
colnames(claims) <- c("date", "initial_claims")
# Remove NA values (if any)
claims <- na.omit(claims)
# Load the data
claims <- read_csv("ICSA.csv")  # Make sure the CSV is in your working directory
# Convert DATE to Date format
claims$DATE <- as.Date(claims$DATE)
View(claims)
# Rename columns for convenience
colnames(claims) <- c("date", "initial_claims")
# Remove NA values (if any)
claims <- na.omit(claims)
# Convert to weekly time series (assuming data is weekly, ending on Thursday)
ts_claims <- ts(claims$initial_claims, frequency = 52, start = c(year(min(claims$date)), week(min(claims$date))))
# Visualize
autoplot(ts_claims) +
ggtitle("Weekly Initial Unemployment Claims") +
xlab("Year") + ylab("Claims")
# Fit an ARIMA model
fit <- auto.arima(ts_claims)
# Forecast next week's value (1 week ahead)
forecast_result <- forecast(fit, h = 1)
# Print and plot the forecast
print(forecast_result)
autoplot(forecast_result)
# Extract the point forecast
forecast_value <- as.numeric(forecast_result$mean)
cat("Forecasted initial claims for May 8, 2025 release:", round(forecast_value))
shiny::runApp('STAT385Final')
runApp('385')
runApp('385')
runApp(358)
runApp(385)
runApp('385')
# Run the app
shinyApp(ui = ui, server = server)
